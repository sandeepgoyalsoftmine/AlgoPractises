package com.company.array;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MaximumSumTriplet {
    public static void main(String[] args) {
        MaximumSumTriplet sumTriplet = new MaximumSumTriplet();
        Integer array[] = {2743, 8611, 4473, 7129, 18435, 5842, 20719, 3504, 14868, 24866, 10939, 1882, 9258, 22751, 28615, 18599, 28459, 2662, 26064, 32757, 20808, 20279, 19490, 19436, 6366, 32076, 7587, 1387, 7834, 8361, 13331, 26049, 8929, 29493, 12434, 23841, 6767, 1736, 19811, 11600, 11838, 21893, 31983, 7329, 29353, 11370, 31245, 21795, 6609, 9253, 11648, 17433, 9536, 7209, 3265, 3498, 23244, 27650, 22016, 26842, 190, 16101, 19813, 30649, 9524, 19852, 24475, 28634, 29892, 27201, 19855, 9991, 25698, 4920, 17781, 22579, 12932, 32545, 3341, 13488, 900, 22526, 8484, 5539, 7493, 6194, 28253, 25012, 1561, 15835, 1841, 31498, 2786, 18530, 31541, 18806, 28792, 13393, 13211, 13550, 21579, 26980, 30972, 9278, 74, 20194, 1621, 21498, 13827, 31277, 19791, 6583, 13579, 11160, 20419, 26490, 160, 3450, 12925, 9073, 10381, 27009, 27968, 10209, 6478, 18504, 15371, 32608, 14197, 12075, 13723, 12612, 19020, 28762, 11057, 12891, 31164, 16684, 13717, 19933, 25453, 2742, 4955, 6814, 2863, 10397, 15461, 20616, 10905, 2600, 20137, 4681, 9199, 27033, 14388, 32585, 7241, 3518, 17007, 8671, 242, 18883, 25250, 3524, 31759, 12106, 29622, 17096, 7297, 9917, 15679, 10179, 13580, 25059, 27578, 12751, 14008, 23730, 24082, 2996, 2679, 24677, 27754, 20900, 11785, 15566, 3094, 13609, 6173, 11244, 29930, 7515, 10169, 5056, 11192, 5974, 8923, 6749, 5652, 10987, 2145, 16447, 31578, 26518, 14630, 29917, 5875, 15792, 15470, 22913, 8147, 30694, 9092, 9816, 26950, 26858, 20641, 26053, 237, 8552, 9488, 31227, 28163, 16956, 23184, 8395, 30181, 16098, 3066, 27066, 2514, 9262, 12579, 21079, 16879, 14141, 4612, 31948, 2446, 171, 29976, 13490, 24751, 6150, 3334, 13866, 22215, 17283, 27008, 27433, 8897, 16368, 28523, 4883, 31811, 17642, 7232, 2188, 6706, 6480, 6322, 6539, 31352, 19448, 24209, 9647, 22277, 25760, 30190, 30423, 27667, 8487, 3456, 2029, 29615, 4861, 29254, 11778, 31349, 12504, 10862, 22432, 29083, 12456, 14198, 22107, 8753, 15822, 17297, 26282, 26022, 24456, 15948, 27125, 18319, 9136, 11377, 1775, 29860, 24999, 12075, 9254, 6923, 10636, 1644, 28889, 8154, 13233, 4748, 28681, 19927, 25679, 6451, 14802, 24962, 14200, 20856, 26364, 5717, 10574, 31562, 23246, 6474, 28275, 1551, 24354, 1182, 4288, 2700, 18111, 18644, 17466, 7173, 2530, 9982, 2113, 13477, 4382, 8248, 26891, 16672, 8806, 32373, 30033, 3990, 9321, 23166, 15432, 9659, 11294, 17207, 26579, 16949, 2207, 27172, 18167, 3397, 16698, 31021, 23695, 15530, 14789, 30110, 17985, 11970, 28979, 21618, 4016, 16627, 3685, 9169, 17907, 25929, 12098, 28119, 24391, 15200, 11786, 14487, 19200, 12421, 20711, 18272, 15814, 27416, 6086 };
        System.out.println("args = " + sumTriplet.solve(Arrays.asList(array)));
    }
    public int solve(List<Integer> A) {
        int maxSum = 0;
        int number1 = 0;
        for(int i =0;i<A.size()-2;i++) {
            int number = A.get(i);
            if(number > number1) {
                int sum = findMaxSum(number,A.subList(i+1,A.size()));
                if(maxSum < sum) {
                    System.out.println(number);
                    maxSum = sum;
                    number1 = number;
                }

            }
        }
        return maxSum;
    }

    public int findMaxSum(int number,List<Integer> A) {
        int max=0;
        int secondmax=0;
        for(int i=0;i<A.size();i++) {
            int number1 = A.get(i);
            if(number1>number) {
                max = number1;
                for (int j = i + 1; j < A.size(); j++) {
                    number1 = A.get(j);
                    if (number1 > max) {
                        secondmax = max;
                        max = number1;
                    }
                }
            }
            if(secondmax != 0) {
                break;
            }
        }
        if(max == 0 || secondmax == 0){
            return 0;
        }
        return number +secondmax+max;

    }
}

